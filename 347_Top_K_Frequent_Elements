class Solution {
public:
    vector<int> topKFrequent(vector<int>& nums, int k) {
        vector<int> result;
        int count=0, num=0;
        for( auto i: nums ) {
            if( m_counts.find(i) == m_counts.end() ) {
                m_counts[i] = 1;
            } else {
                m_counts[i]++;
            }
        }
        for( auto p: m_counts ) {
            m_frequence.push_back(p);
        }
        make_heap(m_frequence.begin(), m_frequence.end(), compare);
        for(int i=0; i<k; i++) {
            result.push_back(m_frequence.front().first);
            pop_heap(m_frequence.begin(), m_frequence.end(), compare);
            m_frequence.pop_back();
        }
        return result;
    }
    
private:
    static bool compare(const pair<int, int> &a, const pair<int, int> &b) {
        return a.second < b.second;
    }

    vector<pair<int, int>> m_frequence;
    unordered_map<int, int> m_counts;
};
