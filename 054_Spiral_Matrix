class Solution {
public:
    vector<int> spiralOrder(vector<vector<int>>& matrix) {
        if(matrix.empty()) return result;
        top = left = 0;
        bot = matrix.size()-1;
        right = matrix[0].size()-1;
        DFS(matrix, 0, 0, 0);
        return result;
    }
    
private:
    void DFS(vector<vector<int>>& matrix, int x, int y, int direction) {
        result.push_back(matrix[x][y]);
        switch(direction) {
        case 0:
            if(y+1<=right) DFS(matrix, x, y+1, 0);
            else if(x+1 <= bot) {
                top++;
                DFS(matrix, x+1, y, 1);
            }
            break;
        case 1:
            if(x+1<=bot) DFS(matrix, x+1, y, 1);
            else if(y-1 >= left) {
                right--;
                DFS(matrix, x, y-1, 2);
            }
            break;
        case 2:
            if(y-1>=left) DFS(matrix, x, y-1, 2);
            else if(x-1 >= top) {
                bot--;
                DFS(matrix, x-1, y, 3);
            }
            break;
        case 3:
            if(x-1>=top) DFS(matrix, x-1, y, 3);
            else if(y+1 <= right) {
                left++;
                DFS(matrix, x, y+1, 0);
            }
            break;
        }
    }
    
private:
    int top, bot, left, right;
    vector<int> result;
};

The run time is O(m*n), where m is the number of rows and n is the number of columns. 
