/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */
class Solution {
public:
    vector<Interval> insert(vector<Interval>& intervals, Interval newInterval) {
        vector<Interval> res;
        int start, end;
        start = end = -1;
        for(int i=0; i<intervals.size(); ++i) {
            if(newInterval.start <= intervals[i].end && intervals[i].start < newInterval.start) {
                newInterval.start = intervals[i].start;
            }
            if(intervals[i].start <= newInterval.end && newInterval.end < intervals[i].end ) {
                newInterval.end = intervals[i].end;
            }
        }
        bool inserted = false;
        for(int i=0; i<intervals.size(); ++i) {
            if(intervals[i].start < newInterval.start) {
                res.push_back(intervals[i]);
            }
            if(newInterval.end < intervals[i].start) {
                if(!inserted) {
                    res.push_back(newInterval);
                    inserted = true;
                }
                res.push_back(intervals[i]);
            }
            
        }
        if(!inserted) {
            res.push_back(newInterval);
        }
        return res;
    }
};
