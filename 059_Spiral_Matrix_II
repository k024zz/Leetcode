class Solution {
public:
    vector<vector<int>> generateMatrix(int n) {
        i = 1;
        top = left = 0;
        right = bot = n-1;
        vector<vector<int>> matrix(n, vector<int>(n));
        if(n>0) {
            DFS(matrix, 0, 0, 0);
        }
        return matrix;
    }
    
private:
    void DFS(vector<vector<int>>& matrix, int x, int y, int direction) {
        matrix[x][y] = i++;
        switch(direction) {
        case 0:
            if(y+1<=right) DFS(matrix, x, y+1, 0);
            else if(x+1 <= bot) {
                top++;
                DFS(matrix, x+1, y, 1);
            }
            break;
        case 1:
            if(x+1<=bot) DFS(matrix, x+1, y, 1);
            else if(y-1 >= left) {
                right--;
                DFS(matrix, x, y-1, 2);
            }
            break;
        case 2:
            if(y-1>=left) DFS(matrix, x, y-1, 2);
            else if(x-1 >= top) {
                bot--;
                DFS(matrix, x-1, y, 3);
            }
            break;
        case 3:
            if(x-1>=top) DFS(matrix, x-1, y, 3);
            else if(y+1 <= right) {
                left++;
                DFS(matrix, x, y+1, 0);
            }
            break;
        }
    }
    
private:
    int top, bot, left, right;
    int i;
};
